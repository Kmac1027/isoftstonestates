{"version":3,"sources":["auto.js","App.js","reportWebVitals.js","index.js"],"names":["Autocomplete","props","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","onClick","innerText","onKeyDown","state","keyCode","length","suggestionsListComponent","this","class","map","index","className","type","Component","App","stateNameArray","url","a","fetch","response","json","data","i","push","StateName","getData","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAqHeA,E,kDAhHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,SAAW,SAAAC,GAAM,IACPC,EAAgB,EAAKH,MAArBG,YACFC,EAAYF,EAAEG,cAAcC,MAE5BC,EAAsBJ,EAAYK,QACtC,SAAAC,GAAU,OACRA,EAAWC,cAAcC,QAAQP,EAAUM,gBAAkB,KAGjE,EAAKE,SAAS,CACZC,iBAAkB,EAClBN,sBACAO,iBAAiB,EACjBV,UAAWF,EAAEG,cAAcC,SAvBZ,EA0BnBS,QAAU,SAAAb,GACR,EAAKU,SAAS,CACZC,iBAAkB,EAClBN,oBAAqB,GACrBO,iBAAiB,EACjBV,UAAWF,EAAEG,cAAcW,aA/BZ,EAkCnBC,UAAY,SAAAf,GAAM,IAAD,EACmC,EAAKgB,MAA/CL,EADO,EACPA,iBAAkBN,EADX,EACWA,oBAE1B,GAAkB,KAAdL,EAAEiB,QACJ,EAAKP,SAAS,CACZC,iBAAkB,EAClBC,iBAAiB,EACjBV,UAAWG,EAAoBM,UAE5B,GAAkB,KAAdX,EAAEiB,QAAgB,CAC3B,GAAyB,IAArBN,EACF,OAEF,EAAKD,SAAS,CAAEC,iBAAkBA,EAAmB,SAGlD,GAAkB,KAAdX,EAAEiB,QAAgB,CACzB,GAAIN,EAAmB,IAAMN,EAAoBa,OAC/C,OAEF,EAAKR,SAAS,CAAEC,iBAAkBA,EAAmB,MApDvD,EAAKK,MAAQ,CACXL,iBAAkB,EAClBN,oBAAqB,GACrBO,iBAAiB,EACjBV,UAAW,IANI,E,0CAyDnB,WAAU,IAaJiB,EAXFpB,EASEqB,KATFrB,SACAc,EAQEO,KARFP,QACAE,EAOEK,KAPFL,UAJK,EAWHK,KANFJ,MACEL,EANG,EAMHA,iBACAN,EAPG,EAOHA,oBACAO,EARG,EAQHA,gBACAV,EATG,EASHA,UAgCJ,OA3BIU,GAAmBV,IAEnBiB,EADEd,EAAoBa,OAEpB,oBAAIG,MAAM,cAAV,SACGhB,EAAoBiB,KAAI,SAACf,EAAYgB,GACpC,IAAIC,EAMJ,OAHID,IAAUZ,IACZa,EAAY,qBAGZ,oBAAIA,UAAWA,EAA4BX,QAASA,EAApD,SACGN,GAD4BA,QASrC,qBAAKc,MAAM,iBAAX,SACE,8DAMN,eAAC,WAAD,WACE,uBACEI,KAAK,OACL1B,SAAUA,EACVgB,UAAWA,EACXX,MAAOF,IAERiB,S,GA3GkBO,aCiCZC,MAhCf,WACE,IAAIC,EAAiB,GADR,4CAKb,WAAuBC,GAAvB,mBAAAC,EAAA,sEACyBC,MAAMF,GAD/B,cACQG,EADR,gBAEqBA,EAASC,OAF9B,OAGE,IADMC,EAFR,OAGWC,EAAI,EAAGA,EAAID,EAAKhB,OAAQiB,IAC/BP,EAAeQ,KAAKF,EAAKC,GAAGE,WAJhC,4CALa,sBAkBb,OAlBa,oCAcbC,CAAQ,6FAKN,sBAAKC,GAAG,YAAYf,UAAU,eAA9B,UACE,8CACA,uBACA,cAAC,EAAD,CAAMvB,YAAa2B,IAAkB,uBACrC,6CACA,uBAAOH,KAAK,UACZ,gDACA,uBAAOA,KAAK,cCnBHe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.ed4feeff.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\n\n// This Autocomplete component was put together with the help of https://www.digitalocean.com/community/tutorials/react-react-autocomplete\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: \"\"\n    };\n  }\n\n  onChange = e => {\n    const { suggestions } = this.props;\n    const userInput = e.currentTarget.value;\n\n    const filteredSuggestions = suggestions.filter(\n      suggestion =>\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions,\n      showSuggestions: true,\n      userInput: e.currentTarget.value\n    });\n  }\n  onClick = e => {\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: e.currentTarget.innerText\n    });\n  };\n  onKeyDown = e => {\n    const { activeSuggestion, filteredSuggestions } = this.state;\n\n    if (e.keyCode === 13) {\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n        userInput: filteredSuggestions[activeSuggestion]\n      });\n    } else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\n    }\n\n    else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\n    }\n  };\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n\n    let suggestionsListComponent;\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = (\n          <ul class=\"suggestions\">\n            {filteredSuggestions.map((suggestion, index) => {\n              let className;\n\n\n              if (index === activeSuggestion) {\n                className = \"suggestion-active\";\n              }\n              return (\n                <li className={className} key={suggestion} onClick={onClick}>\n                  {suggestion}\n                </li>\n              );\n            })}\n          </ul>\n        );\n      } else {\n        suggestionsListComponent = (\n          <div class=\"no-suggestions\">\n            <em>No suggestions available.</em>\n          </div>\n        );\n      }\n    }\n    return (\n      <Fragment>\n        <input\n          type=\"text\"\n          onChange={onChange}\n          onKeyDown={onKeyDown}\n          value={userInput}\n        />\n        {suggestionsListComponent}\n      </Fragment>\n    );\n  }\n}\n\nexport default Autocomplete;","import React, { useState, Autocomplete } from 'react';\nimport './App.css';\nimport reactDom from 'react-dom';\nimport Auto from './auto'\n\nfunction App() {\n  var stateNameArray = [];\n\n  //const [usStates, setUsStates] = useState([])\n\n  async function getData(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    for (let i = 0; i < data.length; i++) {\n      stateNameArray.push(data[i].StateName)\n    }\n    //console.log(stateNameArray)\n  };\n\n  getData('https://bhamilton1000.github.io/SampleData/Web-Question-001/UnitedStatesWithCounties.json');\n  //console.log(stateNameArray)\n\n\n  return (\n    <div id='container' className=\"autocomplete\">\n      <h1>Select State</h1>\n      <hr></hr>\n      <Auto suggestions={stateNameArray} /><br></br>\n      <label>Contains</label>\n      <input type=\"radio\"></input>\n      <label>Starts With</label>\n      <input type=\"radio\"></input>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}